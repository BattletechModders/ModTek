on:
  workflow_call:
    inputs:
      checkout-directory:
        description: 'The directory the repository will reside in.'
        required: true
        type: string
      build-script:
        description: 'The script that builds the mod, runs within the checkout directory.'
        required: true
        type: string
      release-notes:
        description: 'The release notes to use for tagged releases.'
        default: 'Latest stable version'
        type: string
    secrets:
      MANAGED_ARCHIVE_PW:
        required: true
      MANAGED_ARCHIVE_URL:
        required: true

jobs:
  mod-builder:
    runs-on: ubuntu-latest
    env:
      BATTLETECH_DIR: ${{ github.workspace }}/BATTLETECH
      MODS_DIR: ${{ github.workspace }}/BATTLETECH/Mods
      MANAGED_DIR: ${{ github.workspace }}/BATTLETECH/BattleTech_Data/Managed
      DIST_DIR: ${{ github.workspace }}/dist
    steps:
      - name: Setup dotnet
        uses: actions/setup-dotnet@master
        with:
          dotnet-version: 7
          dotnet-quality: preview
      - name: Prepare BATTLETECH
        run: |
          curl -L -o Managed.7z  ${{ secrets.MANAGED_ARCHIVE_URL }}
          mkdir -p "${{ env.MANAGED_DIR }}"
          7z e -p${{ secrets.MANAGED_ARCHIVE_PW }} -o"${{ env.MANAGED_DIR }}" Managed.7z
          rm Managed.7z
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ inputs.checkout-directory }}
          fetch-depth: 0 # tags for GitVersion
          submodules: true
      - name: Build Mod
        working-directory: ${{ inputs.checkout-directory }}
        run: ${{ inputs.build-script }}
      - name: Delete Latest
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: dev-drprasad/delete-tag-and-release@master
        with:
          tag_name: "latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release Latest
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.DIST_DIR }}/*
          generateReleaseNotes: true
          makeLatest: true
          name: "Latest (unstable)"
          prerelease: true
          tag: "latest"
      - name: Release Tag
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          allowUpdates: true
          artifacts: ${{ env.DIST_DIR }}/*
          body: ${{ inputs.release-notes }}
          makeLatest: true
